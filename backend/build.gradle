buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE'
    }
}

// keep alphabetical order in groups
plugins {
    // 3rd party
    id 'de.aaschmid.cpd' version '1.0'
    id 'io.spring.dependency-management' version "1.0.6.RELEASE"
    id 'org.springframework.boot' version '2.0.3.RELEASE'

    // core
    id 'checkstyle'
    id 'findbugs'
    id 'idea'
    id "jacoco"
    id 'java'
    id 'pmd'
}

version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// keep alphabetical order in groups
dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'pl.pragmatists:JUnitParams:1.1.1'

    compile 'com.h2database:h2:1.4.197'
    compile 'io.rest-assured:spring-mock-mvc:3.1.0'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile "org.flywaydb:flyway-core:5.1.4"
    compile 'org.postgresql:postgresql:42.1.4'
    compile 'org.projectlombok:lombok:1.18.0'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.springframework.boot:spring-boot-starter-web'
}

checkstyle {
    configFile file('config/checkstyle.xml')
    toolVersion '8.11'
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.55 // TODO increase limit to 0.7
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
        }
        rule {
            enabled = false // TODO enable when all classes covered
            element = 'CLASS'
            excludes = ['com.pfm.Application']
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }
        rule {
            enabled = false // TODO enable when all classes covered
            element = 'CLASS'
            excludes = ['com.pfm.Application']
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

cpdCheck {
    source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
}
