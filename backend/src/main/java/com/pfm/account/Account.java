package com.pfm.account;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.pfm.history.DifferenceProvider;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@Entity
@AllArgsConstructor
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public final class Account implements DifferenceProvider<Account> {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @ApiModelProperty(value = "Account id (generated by application)", required = true, example = "1")
  private Long id;

  @ApiModelProperty(value = "Account name", required = true, example = "Alior Bank savings account")
  private String name;

  @ApiModelProperty(value = "Account's balance", required = true, example = "1438.89")
  private BigDecimal balance;

  @ApiModelProperty(value = "Account owner id", required = true, example = "1")
  private long userId;

  @Override
  public List<String> getDifferences(Account otherAccount) {
    List<String> differences = new ArrayList<>();

    if (!(this.getName().equals(otherAccount.getName()))) {
      differences.add(String.format(UPDATE_ENTRY_TEMPLATE, "Account name", this.getName(), otherAccount.getName()));
    }

    if (!(this.getBalance().compareTo(otherAccount.getBalance()) == 0)) {
      differences.add(String.format(UPDATE_ENTRY_TEMPLATE, "Account '" + this.getName() + "' balance", this.getBalance().toString(),
          otherAccount.getBalance().toString()));
    }

    return differences;
  }

  @Override
  public List<String> getObjectPropertiesWithValues() {
    List<String> newValues = new ArrayList<>();
    newValues.add(String.format(ENTRY_VALUES_TEMPLATE, this.getName() + " Account ", "'balance'", this.getBalance().toString()));
    return newValues;
  }

  @Override
  public String getObjectDescriptiveName() {
    return this.getName();
  }
}